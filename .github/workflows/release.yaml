name: Release

on:
  push:
    tags: [ v\d+\.\d+\.\d+ ]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Get tag message
        id: tag
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          echo "message=$(git tag -l --format='%(contents:subject)' ${{ steps.get_version.outputs.version }})" >> $GITHUB_OUTPUT

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        env:
          PACKAGE_VERSION: "${{ steps.get_version.outputs.version-without-v }}"
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: `v${process.env.PACKAGE_VERSION}`,
              })
              if (release) {
                return release.data.id
              }
            } catch (error) {
              console.log(error)
            }
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `v${process.env.PACKAGE_VERSION}`,
              body: `${{ steps.tag.outputs.message }}`,
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  build-browser-extension:
    runs-on: ubuntu-22.04
    needs: create-release

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Get tag message
        id: tag
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          echo "message=$(git tag -l --format='%(contents:subject)' ${{ steps.get_version.outputs.version }})" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: make build
        env:
          VERSION: "${{ steps.get_version.outputs.version-without-v }}"

      - name: Package plugin
        run: |
          mkdir release
          mv dist/browser-extension/chromium release/openai-translator-chrome-extension-${{ steps.get_version.outputs.version-without-v }}
          cd release
          zip -r openai-translator-chrome-extension-${{ steps.get_version.outputs.version-without-v }}.zip ./openai-translator-chrome-extension-${{ steps.get_version.outputs.version-without-v }}/*

      - name: Upload plugin to release
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: ${{ steps.get_version.outputs.version }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release/openai-translator-chrome-extension-${{ steps.get_version.outputs.version-without-v }}.zip
          asset_name: openai-translator-chrome-extension-${{ steps.get_version.outputs.version-without-v }}.zip
          tag: ${{ github.ref }}
          overwrite: true
          body: ${{ steps.tag.outputs.message }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri, build-browser-extension]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
